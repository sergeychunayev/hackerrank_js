import chai from 'chai';
import fn from '../../../src/graph_theory/demanding_money/index.mjs';

const assert = chai.assert;

const test = (money, roads, expected, testName = '') => {
  const paramTitle = JSON.stringify({money, roads});
  const title = testName ? `${testName}: ${paramTitle}` : paramTitle
  it(title, () => {
    const result = fn(money, roads);
    assert.deepEqual(result, expected);
  })
};

test([6, 8, 2], [[1, 2], [3, 2]], [8, 2]);
test([0, 100, 50], [[2, 3]], [100, 2]);
test([40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40], [[2, 13], [13, 14], [4, 10], [2, 5], [2, 3]], [480, 4]);
test([0, 0, 50, 50, 100, 0, 0, 0, 100, 0, 0, 0, 100, 0, 0, 100, 50, 0, 0, 0, 100], [[4, 9], [5, 20], [3, 21], [7, 10], [3, 12], [3, 7]], [550, 3072]);
test([0, 100], [], [100, 2]);
test(new Array(33).fill(0), [[2, 5]], [0, 6442450944]);
test([100, 0, 100, 100, 100, 0, 100], [[3, 5], [2, 4], [5, 6], [4, 6], [1, 4]], [300, 8]);
test([75, 75, 50, 75, 100], [[3, 5], [2, 5], [2, 3], [4, 5], [1, 3], [2, 4]], [175, 1]);
test([0], [], [0, 2]);
test([0, 0, 0, 0], [], [0, 16]);
test([0, 0, 0], [], [0, 8]);
test([1, 1], [], [2, 1]);
test([1], [], [1, 1]);
test([1, 1], [[1, 2]], [1, 2]);
test([1, 2], [[1, 2]], [2, 1]);
test([1, 2, 3], [], [6, 1]);
test([], [], [0, 1]);
test(
    [25, 25, 25, 75, 100, 25, 25, 0, 0, 100, 75, 0, 75, 50, 0, 50, 50, 25, 50, 25, 0, 50, 25, 75, 50, 100, 100, 100, 25, 100, 25, 0, 50, 50],
    [[31, 34], [7, 28], [19, 20], [8, 24], [13, 19], [10, 18], [18, 33], [7, 31], [9, 18], [17, 31], [1, 4], [10, 23], [1, 34], [5, 18], [13, 27], [5, 22], [17, 27], [10, 11], [29, 33], [21, 32], [6, 7], [12, 18], [1, 18], [18, 19], [3, 25], [2, 25], [10, 21], [4, 30], [2, 29], [20, 34], [7, 22], [5, 23], [28, 29], [6, 19], [7, 34], [14, 28], [1, 19], [7, 19], [11, 30], [23, 31], [29, 34], [18, 27], [18, 25], [4, 21], [12, 22], [20, 26], [19, 27], [4, 13], [9, 26], [23, 33]],
    [925, 16],
    'Test case 44'
);